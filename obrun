#!/bin/sh

# In case it's a symlink to the file in the git repo
readlink $0 && realscript=$(readlink $0) || realscript=$0
cd `dirname $realscript`
version=`git describe --tags`
command=$1

# See if we can use can use bashisms
if test -n "$BASH";
then
    is_bash=1
else
    is_bash=
fi

if test -z "$XDG_CACHE_HOME";
then
     XDG_CACHE_HOME=~/.cache
fi

if test -z "$XDG_CONFIG_HOME";
then
     XDG_CONFIG_HOME=~/.config
fi

if test -z "$XDG_DATA_HOME";
then
    XDG_DATA_HOME=~/.local/share
fi
install -d $XDG_CACHE_HOME $XDG_CONFIG_HOME $XDG_DATA_HOME

show_error()
{
    zenity --error --text="$1" || xmessage "$1" || echo "$1" >&2
}

show_dialog()
{
    if test -f $XDG_CACHE_HOME/obrun.lock;
    then
        show_error "`_ Another instance of obrun is already running`"
        exit
    fi
    touch $XDG_CACHE_HOME/obrun.lock

    if test "$is_bash";
    then
        local lines=`wc -l $histfile | cut -d ' ' -f 1`
        local harr
        for i in `seq 1 $lines`;
        do
            harr[$i]=`sed -n ${i}p "$histfile"`
        done
        local prog=`zenity --title "\`_ 'Run…'\`" --text "\`_ 'Select or enter a program to run'\`" --height \`get_setting height 60\` --width \`get_setting width 80\` --\`get_setting type\` \`get_setting arguments\` "${harr[@]}"`
        exitcode=$?
    else
        # Suggestions are how to avoid this redundancy are welcome
        local prog=`zenity --title "\`_ 'Run…'\`" --text "\`_ 'Select or enter a program to run'\`" --height \`get_setting height 60\` --width \`get_setting width 80\` --\`get_setting type\` \`get_setting arguments\` \`cat $histfile\``
        exitcode=$?
    fi

    # OK
    if test $exitcode -eq 0;
    then
        if test "$command" == "remove";
        then
            remove_entry "$prog"
        else
            add_entry "$prog"
        fi
    # Not Cancelled
    elif test $exitcode -ne 1;
    then
        show_error "`_ 'zenity not found'`"
    fi
    rm -f $XDG_CACHE_HOME/obrun.lock
    exit $exitcode
}

add_entry()
{
    entry=$1
    if test ! $is_bash;
    then
        histent=`echo "$entry" | sed -e 's/ /<space>/g'`
    else
        histent=$entry
    fi

    if test -n "$histent";
    then
        if test ! `grep "^$histent\$" "$histfile"`;
        then
            echo "$histent" >> "$histfile"
        fi

        if test "$command" != "add";
        then
            if test ! $is_bash;
            then
                entry=`echo $entry | sed -e 's/<space>/ /g'` 
            fi
            $SHELL -c "$entry &"
        fi
    fi
}

remove_entry()
{
    entry=$1
    if ! which perl >/dev/null 2>&1;
    then
        show_error "`_ 'Can'\'t' remove the entry without perl'`"
    fi

    perl -e '$m=`cat '$histfile'`; $m=~s/'$entry'\n//; print $m;' > $XDG_CACHE_HOME/.tmp
    if test $? -eq 0;
    then
        mv -f $XDG_CACHE_HOME/.tmp $histfile
    fi
}

export TEXTDOMAIN=obrun
export TEXTDOMAINDIR=$XDG_DATA_HOME/locale
_()
{
    which gettext >/dev/null 2>&1 && gettext -s "$@" || echo "$@"
}

get_setting()
{
    setting=$1
    default=$2
    lines=`wc -l "$histfile" | cut -d ' ' -f 1`
    if which xmllint > /dev/null 2>&1;
    then
        e=`xmllint --xpath "obrun_config/dialog/$setting$lines/text()" "$configfile"`
        if test $? -eq 0;
        then
            echo $e
        else
            e=`xmllint --xpath "obrun_config/dialog/$setting/text()" "$configfile"`
            if test $? -eq 0;
            then
                echo $e
            else
                echo $default
            fi
        fi
    else
        show_error "`_ 'xmllint not found. Can not read settings'`"
    fi
}


create_config()
{
    indent="    "
    echo "<obrun_config>"
    echo "$indent<dialog>"
    echo "$indent$indent<height>60</height>"
    echo "$indent$indent<width>80</width>"
    echo "$indent$indent<type>entry</type>"
    echo "$indent$indent<arguments> </arguments>"
    echo "$indent$indent<arguments1>--entry-text</arguments1>"
    echo "$indent</dialog>"
    echo "</obrun_config>"
}

make_dist()
{
    # Create a distribution
    mkdir obrun-$version
    mkdir obrun-$version/bin
    cp -f $XDG_DATA_HOME/../bin/obrun obrun-$version/bin
    mkdir obrun-$version/share
    mkdir obrun-$version/share/locale
    cp -f $XDG_DATA_HOME/locale/obrun.pot obrun-$version/share/locale
    mkdir obrun-$version/share/locale/de
    mkdir obrun-$version/share/locale/de/LC_MESSAGES
    cp -f $XDG_DATA_HOME/locale/de/LC_MESSAGES/obrun.{mo,po} \
        obrun-$version/share/locale/de/LC_MESSAGES
    mkdir obrun-$version/share/locale/eo
    mkdir obrun-$version/share/locale/eo/LC_MESSAGES
    cp -f $XDG_DATA_HOME/locale/eo/LC_MESSAGES/obrun.{mo,po} \
        obrun-$version/share/locale/eo/LC_MESSAGES
    mkdir obrun-$version/share/locale/es
    mkdir obrun-$version/share/locale/es/LC_MESSAGES
    cp -f $XDG_DATA_HOME/locale/es/LC_MESSAGES/obrun.{mo,po} \
        obrun-$version/share/locale/es/LC_MESSAGES
    tar cf - obrun-$version | gzip -f9 > obrun-$version.tar.gz
    rm -fr obrun-$version
    exit
}

histfile=$XDG_CACHE_HOME/obrun.history
if test ! -f "$histfile";
then
    touch "$histfile"
fi

configfile=$XDG_CONFIG_HOME/obrun.xml
if test ! -f "$configfile";
then
    create_config > "$configfile"
fi

case $command in
    dist)
        make_dist;;
    *help|-h)
        echo "obrun [add|dist|remove]";
        exit;;
    *)
        show_dialog;;
esac
